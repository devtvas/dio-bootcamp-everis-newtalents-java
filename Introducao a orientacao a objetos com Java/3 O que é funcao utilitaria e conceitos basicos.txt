#O que é funcao utilitaria e conceitos basicos


Aprendizado tradicional da orientacao a objetos:
Chamamos de objetos a representacao programatica de algo, como por exemplo um carro, onde temos atributos e acoes tomadas por ele podem ser executadas.

Representacao da classe carro:
um carro, tem altura, largura, cor, combustivel, cilindrada, velociadade maxima, Ele pode: ligar, desligar, parar, andar e acelerar.

E a aplicacao disso no dia a dia??
O problema da utilizacao desse tipo de exemplo para o aprendizado é que ele demostra por analogia como fazer a representacao de um objeto concreto em uma classe, mas geralmente o progarmador que esta iniciando com POO tem dificuldade para tranpo-la para um cenario que possa realmente ser aplicado.

Funcoes estatica utilitarias
"Uma curiosidade é que as funcoes utilitarias sao nada mais nada menos que a programacao estruturada dentro da POO."
Primeira atencao no seu dia a dia é criar classes utilitaria, agrupadas por tema, de forma que voce possa compartilhar com todo seu time e assim evitar duplicidade de codigo.

Como identificar uma funcao utilitaria?
-ela consegue se resolver por ela mesma sem dependencias externas?
-os parametros de entrada sao simples e diretos?
-o resultado de saida tambem é simples e direto?

Exemplo de funcoes utilitarias!
é a classica funcao de validacao de cpf ou cnpj;
entrada simples;
nao depende de recursos externos;
saida simples;

-----------------------------------------------

Conceitos basicos da orientacao a objetos

Classe e Obejto
Uma representacao dados em 
objetos ou entidades
para o procemento de outros objetos

Associacao de classes
quando utilizamos uma
classe dentro de outra classe

Heranca
é a utilizacao de uma 
classe base, fazendo com que
uma nova classe tenha todos os 
atributos e funcoes da classe pai
 mais a suas proprias.

Encapsulamento
E a possibilidade de 
proteger alguns dados ou 
funcionalidades de classe,
nao permitindo que seus
consumidores possam acessa-la.

Polimorfismo
Aqui podemos criar funcoes que 
teao o mesmo nome, mas que podem
 ter diferentes processamentos, 
implementacoes, ou na mesma 
classe o mesmo nome e diferentes 
entradas